import{a as o}from"./js.cookie-Cz0CWeBA.js";const d={CHECKING_AUTH:"checking_auth"},i={domain:void 0,secure:!1,sameSite:"lax",expires:7},s={AUTH_TOKEN:"auth_token",REFRESH_TOKEN:"refresh_token",USER_INFO:"user_info",MERCHANT_ID:"merchant_id",ORG_ID:"org_id",PROFILE_ID:"profile_id",TWO_FA_TOKEN:"two_fa_token"},E=()=>"https://sandbox.hyperswitch.io",a={SIGNIN:"/user/v2/signin",SIGNIN_MAGIC_LINK:"/user/signin",SIGNOUT:"/user/signout",REFRESH_TOKEN:"/user/refresh_token",TOTP_VERIFY:"/user/2fa/totp/verify",TOTP_RESET:"/user/2fa/totp/reset",RECOVERY_CODE_VERIFY:"/user/2fa/recovery_code/verify",USER_INFO:"/user",SWITCH_MERCHANT:"/user/v2/switch_merchant",MERCHANT_ACCOUNT:"/accounts",MERCHANT_LIST:"/accounts/list",PAYMENTS_LIST:"/payments/list",PAYMENT_INTENT:"/payments",PAYMENT_CONFIRM:"/payments/{payment_id}/confirm",PAYMENT_CAPTURE:"/payments/{payment_id}/capture",PAYMENT_CANCEL:"/payments/{payment_id}/cancel",REFUNDS_LIST:"/refunds/list",REFUND_CREATE:"/refunds",DISPUTES_LIST:"/disputes/list",DISPUTE_EVIDENCE:"/disputes/{dispute_id}/evidence",ANALYTICS_PAYMENTS:"/analytics/v1/merchant/metrics/payments",ANALYTICS_REFUNDS:"/analytics/v1/merchant/metrics/refunds",ANALYTICS_SDK:"/analytics/v1/sdk_events/metrics",CONNECTORS_LIST:"/account/{account_id}/connectors",CONNECTOR_CREATE:"/account/{account_id}/connectors",CONNECTOR_UPDATE:"/account/{account_id}/connectors/{connector_id}",WEBHOOKS_LIST:"/webhooks",WEBHOOK_CREATE:"/webhooks",API_KEYS_LIST:"/api_keys/list",API_KEY_CREATE:"/api_keys",BUSINESS_PROFILE:"/account/{account_id}/business_profile",ROUTING_CONFIG:"/routing",CUSTOMERS_LIST:"/customers/list",CUSTOMER_CREATE:"/customers"};class _{constructor(){this.baseURL=E(),this.interceptors=[]}setupAxiosInterceptors(e){e.interceptors.request.use(r=>{const t=this.getAuthToken();return t&&(r.headers.Authorization=`Bearer ${t}`),r.headers["Content-Type"]="application/json",r.headers.Accept="application/json",r},r=>Promise.reject(r)),e.interceptors.response.use(r=>r,async r=>{var n;const t=r.config;if(((n=r.response)==null?void 0:n.status)===401&&!t._retry){t._retry=!0;try{await this.refreshToken();const c=this.getAuthToken();return t.headers.Authorization=`Bearer ${c}`,e(t)}catch(c){return this.clearAuth(),window.location.href="/login",Promise.reject(c)}}return Promise.reject(r)})}setAuthToken(e){o.set(s.AUTH_TOKEN,e,i)}getAuthToken(){return o.get(s.AUTH_TOKEN)}setRefreshToken(e){o.set(s.REFRESH_TOKEN,e,i)}getRefreshToken(){return o.get(s.REFRESH_TOKEN)}setUserInfo(e){o.set(s.USER_INFO,JSON.stringify(e),i)}getUserInfo(){const e=o.get(s.USER_INFO);return e?JSON.parse(e):null}setMerchantId(e){o.set(s.MERCHANT_ID,e,i)}getMerchantId(){return o.get(s.MERCHANT_ID)}setOrgId(e){o.set(s.ORG_ID,e,i)}getOrgId(){return o.get(s.ORG_ID)}setProfileId(e){o.set(s.PROFILE_ID,e,i)}getProfileId(){return o.get(s.PROFILE_ID)}setTwoFAToken(e){o.set(s.TWO_FA_TOKEN,e,i)}getTwoFAToken(){return o.get(s.TWO_FA_TOKEN)}clearAuth(){Object.values(s).forEach(e=>{o.remove(e),i.domain&&o.remove(e,{domain:i.domain})})}isAuthenticated(){const e=this.getAuthToken(),r=this.getUserInfo();return!!(e&&r)}requires2FA(){return!!this.getTwoFAToken()}async signIn(e,r){try{const t=await fetch(`${this.baseURL}${a.SIGNIN}`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({email:e,password:r})}),n=await t.json();if(!t.ok)throw new Error(n.message||"Error de autenticaci贸n");return n.two_factor_auth_required?(this.setTwoFAToken(n.token),{requires2FA:!0,token:n.token}):(this.setAuthToken(n.token),n.refresh_token&&this.setRefreshToken(n.refresh_token),await this.fetchUserInfo(),{success:!0})}catch(t){throw console.error("Error en signIn:",t),t}}async signInWithMagicLink(e){try{const r=await fetch(`${this.baseURL}${a.SIGNIN_MAGIC_LINK}`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({email:e})}),t=await r.json();if(!r.ok)throw new Error(t.message||"Error enviando magic link");return{success:!0,message:t.message}}catch(r){throw console.error("Error en signInWithMagicLink:",r),r}}async verify2FA(e,r=null){try{const t=this.getTwoFAToken();if(!t)throw new Error("Token 2FA no encontrado");const n=r?a.RECOVERY_CODE_VERIFY:a.TOTP_VERIFY,c=r?{recovery_code:r}:{totp:e},T=await fetch(`${this.baseURL}${n}`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(c)}),h=await T.json();if(!T.ok)throw new Error(h.message||"Error verificando 2FA");return this.setAuthToken(h.token),h.refresh_token&&this.setRefreshToken(h.refresh_token),o.remove(s.TWO_FA_TOKEN),await this.fetchUserInfo(),{success:!0}}catch(t){throw console.error("Error en verify2FA:",t),t}}async fetchUserInfo(){try{const e=this.getAuthToken();if(!e)throw new Error("No hay token de autenticaci贸n");const r=await fetch(`${this.baseURL}${a.USER_INFO}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,Accept:"application/json"}}),t=await r.json();if(!r.ok)throw new Error(t.message||"Error obteniendo informaci贸n del usuario");return this.setUserInfo(t),t.merchant_id&&this.setMerchantId(t.merchant_id),t.org_id&&this.setOrgId(t.org_id),t.profile_id&&this.setProfileId(t.profile_id),t}catch(e){throw console.error("Error en fetchUserInfo:",e),e}}async refreshToken(){try{const e=this.getRefreshToken();if(!e)throw new Error("No hay refresh token");const r=await fetch(`${this.baseURL}${a.REFRESH_TOKEN}`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({refresh_token:e})}),t=await r.json();if(!r.ok)throw new Error(t.message||"Error refrescando token");return this.setAuthToken(t.token),t.refresh_token&&this.setRefreshToken(t.refresh_token),t}catch(e){throw console.error("Error en refreshToken:",e),this.clearAuth(),e}}async signOut(){try{const e=this.getAuthToken();e&&await fetch(`${this.baseURL}${a.SIGNOUT}`,{method:"POST",headers:{Authorization:`Bearer ${e}`,Accept:"application/json"}})}catch(e){console.error("Error en signOut:",e)}finally{this.clearAuth()}}async switchMerchant(e){try{const r=this.getAuthToken();if(!r)throw new Error("No hay token de autenticaci贸n");const t=await fetch(`${this.baseURL}${a.SWITCH_MERCHANT}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`,Accept:"application/json"},body:JSON.stringify({merchant_id:e})}),n=await t.json();if(!t.ok)throw new Error(n.message||"Error cambiando merchant");return this.setMerchantId(e),await this.fetchUserInfo(),n}catch(r){throw console.error("Error en switchMerchant:",r),r}}}const A=new _;export{d as A,A as a,a as b};
